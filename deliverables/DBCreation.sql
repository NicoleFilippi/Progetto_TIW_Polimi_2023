DROP TABLE IF EXISTS PriceRange;
DROP TABLE IF EXISTS User_Product;
DROP TABLE IF EXISTS Product_Supplier;
DROP TABLE IF EXISTS Purchase_Product;
DROP TABLE IF EXISTS Product;
DROP TABLE IF EXISTS Purchase;
DROP TABLE IF EXISTS Supplier;
DROP TABLE IF EXISTS User;
DROP TABLE IF EXISTS State;

CREATE TABLE State (
  Iso2 CHAR(2) NOT NULL,
  Name VARCHAR(128) NOT NULL,
  Iso3 CHAR(3) PRIMARY KEY
);

CREATE TABLE User (
	Email VARCHAR(255) PRIMARY KEY CHECK( Email LIKE "%@%.%" ),
	Name VARCHAR(255) NOT NULL,
	Surname VARCHAR(255) NOT NULL,
	
    StateIso3 CHAR(3) REFERENCES State(Iso3) ON DELETE NO ACTION ON UPDATE CASCADE,
    City VARCHAR(255) NOT NULL,
    Street VARCHAR(255) NOT NULL,
    CivicNumber VARCHAR(7) NOT NULL, 
    
	PasswordHash BINARY(32) NOT NULL,
	Salt INTEGER NOT NULL
);

CREATE TABLE Supplier(
	Id INTEGER AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Rating INTEGER CHECK( ( Rating >=1 AND Rating<=5 ) OR Rating IS NULL ),
    FreeShippingThreshold DOUBLE CHECK( FreeShippingThreshold >= 0 OR FreeShippingThreshold IS NULL )
);

CREATE TABLE Purchase(
	Id INTEGER AUTO_INCREMENT PRIMARY KEY,
    Total DOUBLE NOT NULL CHECK( Total >= 0 ),
    Date DATE NOT NULL,
    SupplierId INTEGER REFERENCES Supplier(Id) ON DELETE SET NULL ON UPDATE CASCADE,
    ShippingPrice DOUBLE NOT NULL CHECK( ShippingPrice >= 0 ),
    
    UserEmail VARCHAR(255) REFERENCES User(Email) ON DELETE SET NULL ON UPDATE CASCADE,
    StateIso3 CHAR(3) REFERENCES State(Iso3) ON DELETE NO ACTION ON UPDATE CASCADE,
    City VARCHAR(255) NOT NULL,
    Street VARCHAR(255) NOT NULL,
    CivicNumber VARCHAR(7) NOT NULL
);

CREATE TABLE Product(
	Id INTEGER AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Description VARCHAR(1023),
    Category VARCHAR(255) NOT NULL,
    PhotoPath VARCHAR(255) NOT NULL
);

CREATE TABLE Purchase_Product(
	ProductId INTEGER REFERENCES Product(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    PurchaseId INTEGER REFERENCES Purchase(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    Quantity INTEGER DEFAULT 1 CHECK( Quantity > 0 ),
    Price DOUBLE NOT NULL CHECK( Price >= 0 ),
    PRIMARY KEY(ProductId, PurchaseId)
);

CREATE TABLE Product_Supplier(
	ProductId INTEGER REFERENCES Product(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    SupplierId INTEGER REFERENCES Supplier(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    Price DOUBLE NOT NULL CHECK( Price >= 0 ),
    PRIMARY KEY(ProductId, SupplierId)
);

CREATE TABLE User_Product(
	UserEmail VARCHAR(255) REFERENCES User(Email) ON DELETE CASCADE ON UPDATE CASCADE,
    ProductId INTEGER REFERENCES Product(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    TimeStamp TIMESTAMP(3) NOT NULL,
    PRIMARY KEY (UserEmail, ProductId)
);

CREATE TABLE PriceRange(
	SupplierId INTEGER REFERENCES Supplier(Id) ON DELETE CASCADE ON UPDATE CASCADE,
	MinQuantity INTEGER NOT NULL CHECK( MinQuantity >= 0 ),
    ShippingPrice DOUBLE NOT NULL CHECK( ShippingPrice >= 0 ),
    PRIMARY KEY(SupplierId, MinQuantity)
);

INSERT INTO State VALUES
('AF', 'Afghanistan', 'AFG'),
('AX', 'Aland Islands', 'ALA'),
('AL', 'Albania', 'ALB'),
('DZ', 'Algeria', 'DZA'),
('AS', 'American Samoa', 'ASM'),
('AD', 'Andorra', 'AND'),
('AO', 'Angola', 'AGO'),
('AI', 'Anguilla', 'AIA'),
('AQ', 'Antarctica', 'ATA'),
('AG', 'Antigua and Barbuda', 'ATG'),
('AR', 'Argentina', 'ARG'),
('AM', 'Armenia', 'ARM'),
('AW', 'Aruba', 'ABW'),
('AU', 'Australia', 'AUS'),
('AT', 'Austria', 'AUT'),
('AZ', 'Azerbaijan', 'AZE'),
('BS', 'Bahamas', 'BHS'),
('BH', 'Bahrain', 'BHR'),
('BD', 'Bangladesh', 'BGD'),
('BB', 'Barbados', 'BRB'),
('BY', 'Belarus', 'BLR'),
('BE', 'Belgium', 'BEL'),
('BZ', 'Belize', 'BLZ'),
('BJ', 'Benin', 'BEN'),
('BM', 'Bermuda', 'BMU'),
('BT', 'Bhutan', 'BTN'),
('BO', 'Bolivia', 'BOL'),
('BQ', 'Bonaire, Sint Eustatius and Saba', 'BES'),
('BA', 'Bosnia and Herzegovina', 'BIH'),
('BW', 'Botswana', 'BWA'),
('BV', 'Bouvet Island', 'BVT'),
('BR', 'Brazil', 'BRA'),
('IO', 'British Indian Ocean Territory', 'IOT'),
('BN', 'Brunei Darussalam', 'BRN'),
('BG', 'Bulgaria', 'BGR'),
('BF', 'Burkina Faso', 'BFA'),
('BI', 'Burundi', 'BDI'),
('KH', 'Cambodia', 'KHM'),
('CM', 'Cameroon', 'CMR'),
('CA', 'Canada', 'CAN'),
('CV', 'Cape Verde', 'CPV'),
('KY', 'Cayman Islands', 'CYM'),
('CF', 'Central African Republic', 'CAF'),
('TD', 'Chad', 'TCD'),
('CL', 'Chile', 'CHL'),
('CN', 'China', 'CHN'),
('CX', 'Christmas Island', 'CXR'),
('CC', 'Cocos Islands', 'CCK'),
('CO', 'Colombia', 'COL'),
('KM', 'Comoros', 'COM'),
('CG', 'Congo', 'COG'),
('CD', 'Democratic Republic of the Congo', 'COD'),
('CK', 'Cook Islands', 'COK'),
('CR', 'Costa Rica', 'CRI'),
('CI', 'Cote D\'Ivoire', 'CIV'),
('HR', 'Croatia', 'HRV'),
('CU', 'Cuba', 'CUB'),
('CW', 'Curacao', 'CUW'),
('CY', 'Cyprus', 'CYP'),
('CZ', 'Czech Republic', 'CZE'),
('DK', 'Denmark', 'DNK'),
('DJ', 'Djibouti', 'DJI'),
('DM', 'Dominica', 'DMA'),
('DO', 'Dominican Republic', 'DOM'),
('EC', 'Ecuador', 'ECU'),
('EG', 'Egypt', 'EGY'),
('SV', 'El Salvador', 'SLV'),
('GQ', 'Equatorial Guinea', 'GNQ'),
('ER', 'Eritrea', 'ERI'),
('EE', 'Estonia', 'EST'),
('ET', 'Ethiopia', 'ETH'),
('FK', 'Falkland Islands', 'FLK'),
('FO', 'Faroe Islands', 'FRO'),
('FJ', 'Fiji', 'FJI'),
('FI', 'Finland', 'FIN'),
('FR', 'France', 'FRA'),
('GF', 'French Guiana', 'GUF'),
('PF', 'French Polynesia', 'PYF'),
('TF', 'French Southern Territories', 'ATF'),
('GA', 'Gabon', 'GAB'),
('GM', 'Gambia', 'GMB'),
('GE', 'Georgia', 'GEO'),
('DE', 'Germany', 'DEU'),
('GH', 'Ghana', 'GHA'),
('GI', 'Gibraltar', 'GIB'),
('GR', 'Greece', 'GRC'),
('GL', 'Greenland', 'GRL'),
('GD', 'Grenada', 'GRD'),
('GP', 'Guadeloupe', 'GLP'),
('GU', 'Guam', 'GUM'),
('GT', 'Guatemala', 'GTM'),
('GG', 'Guernsey', 'GGY'),
('GN', 'Guinea', 'GIN'),
('GW', 'Guinea-Bissau', 'GNB'),
('GY', 'Guyana', 'GUY'),
('HT', 'Haiti', 'HTI'),
('HM', 'Heard Island and Mcdonald Islands', 'HMD'),
('VA', 'Vatican City', 'VAT'),
('HN', 'Honduras', 'HND'),
('HK', 'Hong Kong', 'HKG'),
('HU', 'Hungary', 'HUN'),
('IS', 'Iceland', 'ISL'),
('IN', 'India', 'IND'),
('ID', 'Indonesia', 'IDN'),
('IR', 'Iran', 'IRN'),
('IQ', 'Iraq', 'IRQ'),
('IE', 'Ireland', 'IRL'),
('IM', 'Isle of Man', 'IMN'),
('IL', 'Israel', 'ISR'),
('IT', 'Italy', 'ITA'),
('JM', 'Jamaica', 'JAM'),
('JP', 'Japan', 'JPN'),
('JE', 'Jersey', 'JEY'),
('JO', 'Jordan', 'JOR'),
('KZ', 'Kazakhstan', 'KAZ'),
('KE', 'Kenya', 'KEN'),
('KI', 'Kiribati', 'KIR'),
('KP', 'Norht Korea', 'PRK'),
('KR', 'South Korea', 'KOR'),
('XK', 'Kosovo', 'XKX'),
('KW', 'Kuwait', 'KWT'),
('KG', 'Kyrgyzstan', 'KGZ'),
('LA', 'Lao People\'s Democratic Republic', 'LAO'),
('LV', 'Latvia', 'LVA'),
('LB', 'Lebanon', 'LBN'),
('LS', 'Lesotho', 'LSO'),
('LR', 'Liberia', 'LBR'),
('LY', 'Libyan Arab Jamahiriya', 'LBY'),
('LI', 'Liechtenstein', 'LIE'),
('LT', 'Lithuania', 'LTU'),
('LU', 'Luxembourg', 'LUX'),
('MO', 'Macao', 'MAC'),
('MK', 'Macedonia', 'MKD'),
('MG', 'Madagascar', 'MDG'),
('MW', 'Malawi', 'MWI'),
('MY', 'Malaysia', 'MYS'),
('MV', 'Maldives', 'MDV'),
('ML', 'Mali', 'MLI'),
('MT', 'Malta', 'MLT'),
('MH', 'Marshall Islands', 'MHL'),
('MQ', 'Martinique', 'MTQ'),
('MR', 'Mauritania', 'MRT'),
('MU', 'Mauritius', 'MUS'),
('YT', 'Mayotte', 'MYT'),
('MX', 'Mexico', 'MEX'),
('FM', 'Micronesia', 'FSM'),
('MD', 'Moldova, Republic of', 'MDA'),
('MC', 'Monaco', 'MCO'),
('MN', 'Mongolia', 'MNG'),
('ME', 'Montenegro', 'MNE'),
('MS', 'Montserrat', 'MSR'),
('MA', 'Morocco', 'MAR'),
('MZ', 'Mozambique', 'MOZ'),
('MM', 'Myanmar', 'MMR'),
('NA', 'Namibia', 'NAM'),
('NR', 'Nauru', 'NRU'),
('NP', 'Nepal', 'NPL'),
('NL', 'Netherlands', 'NLD'),
('AN', 'Netherlands Antilles', 'ANT'),
('NC', 'New Caledonia', 'NCL'),
('NZ', 'New Zealand', 'NZL'),
('NI', 'Nicaragua', 'NIC'),
('NE', 'Niger', 'NER'),
('NG', 'Nigeria', 'NGA'),
('NU', 'Niue', 'NIU'),
('NF', 'Norfolk Island', 'NFK'),
('MP', 'Northern Mariana Islands', 'MNP'),
('NO', 'Norway', 'NOR'),
('OM', 'Oman', 'OMN'),
('PK', 'Pakistan', 'PAK'),
('PW', 'Palau', 'PLW'),
('PS', 'Palestina', 'PSE'),
('PA', 'Panama', 'PAN'),
('PG', 'Papua New Guinea', 'PNG'),
('PY', 'Paraguay', 'PRY'),
('PE', 'Peru', 'PER'),
('PH', 'Philippines', 'PHL'),
('PN', 'Pitcairn', 'PCN'),
('PL', 'Poland', 'POL'),
('PT', 'Portugal', 'PRT'),
('PR', 'Puerto Rico', 'PRI'),
('QA', 'Qatar', 'QAT'),
('RE', 'Reunion', 'REU'),
('RO', 'Romania', 'ROM'),
('RU', 'Russia', 'RUS'),
('RW', 'Rwanda', 'RWA'),
('BL', 'Saint Barthelemy', 'BLM'),
('SH', 'Saint Helena', 'SHN'),
('KN', 'Saint Kitts and Nevis', 'KNA'),
('LC', 'Saint Lucia', 'LCA'),
('MF', 'Saint Martin', 'MAF'),
('PM', 'Saint Pierre and Miquelon', 'SPM'),
('VC', 'Saint Vincent and the Grenadines', 'VCT'),
('WS', 'Samoa', 'WSM'),
('SM', 'San Marino', 'SMR'),
('ST', 'Sao Tome and Principe', 'STP'),
('SA', 'Saudi Arabia', 'SAU'),
('SN', 'Senegal', 'SEN'),
('RS', 'Serbia', 'SRB'),
('CS', 'Serbia and Montenegro', 'SCG'),
('SC', 'Seychelles', 'SYC'),
('SL', 'Sierra Leone', 'SLE'),
('SG', 'Singapore', 'SGP'),
('SX', 'Sint Maarten', 'SXM'),
('SK', 'Slovakia', 'SVK'),
('SI', 'Slovenia', 'SVN'),
('SB', 'Solomon Islands', 'SLB'),
('SO', 'Somalia', 'SOM'),
('ZA', 'South Africa', 'ZAF'),
('GS', 'South Georgia and the South Sandwich Islands', 'SGS'),
('SS', 'South Sudan', 'SSD'),
('ES', 'Spain', 'ESP'),
('LK', 'Sri Lanka', 'LKA'),
('SD', 'Sudan', 'SDN'),
('SR', 'Suriname', 'SUR'),
('SJ', 'Svalbard and Jan Mayen', 'SJM'),
('SZ', 'Swaziland', 'SWZ'),
('SE', 'Sweden', 'SWE'),
('CH', 'Switzerland', 'CHE'),
('SY', 'Syrian Arab Republic', 'SYR'),
('TW', 'Taiwan', 'TWN'),
('TJ', 'Tajikistan', 'TJK'),
('TZ', 'Tanzania', 'TZA'),
('TH', 'Thailand', 'THA'),
('TL', 'Timor-Leste', 'TLS'),
('TG', 'Togo', 'TGO'),
('TK', 'Tokelau', 'TKL'),
('TO', 'Tonga', 'TON'),
('TT', 'Trinidad and Tobago', 'TTO'),
('TN', 'Tunisia', 'TUN'),
('TR', 'Turkey', 'TUR'),
('TM', 'Turkmenistan', 'TKM'),
('TC', 'Turks and Caicos Islands', 'TCA'),
('TV', 'Tuvalu', 'TUV'),
('UG', 'Uganda', 'UGA'),
('UA', 'Ukraine', 'UKR'),
('AE', 'United Arab Emirates', 'ARE'),
('GB', 'United Kingdom', 'GBR'),
('US', 'United States', 'USA'),
('UM', 'United States Minor Outlying Islands', 'UMI'),
('UY', 'Uruguay', 'URY'),
('UZ', 'Uzbekistan', 'UZB'),
('VU', 'Vanuatu', 'VUT'),
('VE', 'Venezuela', 'VEN'),
('VN', 'Viet Nam', 'VNM'),
('VG', 'Virgin Islands, British', 'VGB'),
('VI', 'Virgin Islands, U.S.', 'VIR'),
('WF', 'Wallis and Futuna', 'WLF'),
('EH', 'Western Sahara', 'ESH'),
('YE', 'Yemen', 'YEM'),
('ZM', 'Zambia', 'ZMB'),
('ZW', 'Zimbabwe', 'ZWE');

INSERT INTO User VALUES
/* alessandro */
("alessandro.annechini@mail.polimi.it","Alessandro","Annechini","ITA","Milano","Via Mario Rossi","1C",0xc0bc1992406ec00a244f38f05e5023131cebb99cb028e43645e75712fceb5b55,649),
/* nicole */
("nicole.filippi@mail.polimi.it","Nicole","Filippi","ITA","Milano","Via Luigi Verdi","23",0xe917c139a74c843d0a8a3e5e29245de878b444b763e7ab4a680c30169c59dc7e,137);

INSERT INTO Product(Name,Description,Category,PhotoPath) VALUES
( "MAC Eyeshadows", "A palette of neutral tones eyeshadows branded MAC" , "Makeup" , "eyeshadow1.jpg" ),
( "Essence Sparkling Pink Eyeshadow", "A sparkling pink eyeshadow branded Essence" , "Makeup" , "eyeshadow2.jpg" ),
( "MAC Red Lipstick", "A red lipstick branded MAC" , "Makeup" , "lipstick1.jpg" ),
( "MAC Pink Lipstick", "A pink lipstick branded MAC" , "Makeup" , "lipstick2.jpg" ),

( "Nike Sports Shoes", "A pair of black, white and grey unisex sports shoes branded Nike" , "Clothing" , "shoes1.jpg" ),
( "Armani Exchange Sports Shoes", "A pair of white, grey and pink sports shoes for women branded Armani Exchange" , "Clothing" , "shoes2.jpg" ),
( "Black Coat", "A black coat for men" , "Clothing" , "coat1.jpg" ),
( "Black Heels", "A pair of black elegant heels" , "Clothing" , "shoes3.jpg" ),
( "Brown Coat", "An elegant brown coat for women" , "Clothing" , "coat2.jpg" ),

( "Brown Lamp", "A brown lamp" , "House" , "lamp1.jpg" ),
( "Desk Lamp", "A white desk lamp" , "House" , "lamp2.jpg" ),
( "Design Lamp", "A white decorated lamp" , "House" , "lamp3.jpg" ),
( "Crystal Vase", "A colorful hand decorated vase from Murano" , "House" , "vase1.jpg" ),
( "Design Blue Vase", "A design blue glass vase" , "House" , "vase2.jpg" );

INSERT INTO Supplier(Name,Rating,FreeShippingThreshold) VALUES
( "Makeup Forever" , 4 , 70 ),
( "Sephora" , 5 , 100 ),

( "AW Lab" , 3 , 500 ),
( "FootLocker" , 4 , 500 ),
( "PittaRed" , 4 , 400 ),
( "Zalando" , 5 , 300 ),
( "Clothes For Everyone" , 2 , 150 ),

( "IKEA" , 5 , 350 ),
( "FeelAtHome" , 3 , 200 ),
( "Maisons Du Monde" , 4 , 500 );

INSERT INTO Product_Supplier VALUES
(1,1,15),
(1,2,20),
(2,1,3),
(2,2,5),
(3,1,10),
(3,2,12),
(4,1,10),
(4,2,12),

(5,3,110),
(5,4,100),
(6,3,130),
(6,4,140),
(6,5,110),
(8,5,50),
(8,6,45),
(7,6,130),
(7,7,90),
(9,6,130),
(9,7,90),

(10,8,70),
(10,9,50),

(11,9,30),
(11,10,40),

(12,8,100),
(12,10,110),

(13,8,180),
(13,9,120),

(14,8,140),
(14,9,110),
(14,10,150);

INSERT INTO User_Product values
("alessandro.annechini@mail.polimi.it",1,NOW()),
("alessandro.annechini@mail.polimi.it",2,NOW()+1);

INSERT INTO Pricerange values
(1,1,10),
(1,5,5),
(2,1,15),
(2,5,7.5),
(3,1,20),
(3,3,5),
(4,1,25),
(4,2,20),
(4,3,15),
(4,4,10),
(5,1,10),
(5,2,5),
(6,1,15),
(7,1,5),
(7,2,0),
(8,1,30),
(8,3,15),
(9,1,20),
(9,2,5),
(10,1,35),
(10,3,20),
(10,5,10);